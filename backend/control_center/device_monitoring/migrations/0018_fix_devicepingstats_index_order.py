# Generated by Django 5.0.1 on 2025-01-27 15:00

from django.db import migrations, models


def remove_old_index_if_exists(apps, schema_editor):
    """
    Remove the old index if it exists, ignore if it doesn't.
    Also drop any index that might have the wrong name.
    """
    with schema_editor.connection.cursor() as cursor:
        # Drop old index with different column order
        try:
            cursor.execute("DROP INDEX IF EXISTS device_moni_is_aliv_71a46c_idx;")
        except Exception:
            pass
        
        # Drop any index with timestamp+is_alive in correct order but wrong name
        try:
            cursor.execute("DROP INDEX IF EXISTS device_moni_timestamp_is_alive_idx;")
        except Exception:
            pass


def reverse_remove_index(apps, schema_editor):
    """
    Reverse operation - recreate the old index.
    """
    with schema_editor.connection.cursor() as cursor:
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS device_moni_is_aliv_71a46c_idx 
            ON device_monitoring_devicepingstats (is_alive, timestamp);
        """)


class Migration(migrations.Migration):

    dependencies = [
        ('device_monitoring', '0017_remove_devicepingstats_successful_pings_range_0_5'),
    ]

    operations = [
        migrations.RunPython(remove_old_index_if_exists, reverse_remove_index),
        migrations.AddIndex(
            model_name='devicepingstats',
            index=models.Index(fields=['timestamp', 'is_alive'], name='device_moni_timesta_3e408d_idx'),
        ),
    ]
